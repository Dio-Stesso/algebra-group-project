@page "/finite-field"
@using AlgebraWASM.Client;
@using System.ComponentModel.DataAnnotations;
@using System.Runtime.InteropServices;
@using System.Text;



<div style="margin-left: 30%;">
	<select @onchange="SelectedMethod">
		<option value="">--Оберіть метод--</option>
		<option value="2">2. Додавання, віднімання, множення чисел. Знаходження оберненого елемента.</option>
		<option value="3">3. Знаходження оберненого елемента.</option>
		<option value="4">4. Швидке піднесення у степінь</option>
		<option value="5">5. Розклад числа на множники</option>
		<option value="6">6. Обчислення квадратного кореня</option>
		<option value="7">7. Обчислення дискретного логарифму</option>
		<option value="8">8. Знаходження порядку елемента групи</option>
		<option value="9">9. Знаходження функції Ейлера від заданого числа та функції Кармайкла від заданого числа</option>
		<option value="10">10. Ймовірнісна перевірка числа на простоту</option>
	</select>
	<div style="display: flex; margin-left: 20px; gap: 10px; margin-top: 15px">
		<label for="@coefModule">Coefficient module: </label>
		<input name="coef-module" type="input" @bind-value="@coefModule" />
	</div>

	@switch (selected)
	{
		case "2":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<input type="text" @bind-value="@secondInputBox" />
				<button @onclick="Add"> Add </button>
				<button @onclick="Subtract"> Subtract </button>
				<button @onclick="Multiply"> Multiply </button>
					<p>@result</p>
			</div>
			break;
		case "3":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<input type="text" @bind-value="@secondInputBox" />
				<button @onclick="Inversion"> Inversion </button>
				<button @onclick="Division"> Division </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "4":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<input type="text" @bind-value="@secondInputBox" />  @*pow*@
				<button @onclick="FastPow"> Fast Pow </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "5":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<button @onclick="Polard"> Polard </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "6":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<button @onclick="QuadSqrt"> QuadSqrt </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "7":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<input type="text" @bind-value="@secondInputBox" />
				<button @onclick="isGenerator"> isGenerator </button>
				<button @onclick="DscLog"> Calculate </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "8":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<button @onclick="Order"> Order </button>
				<button @onclick="isGenerator"> isGenerator </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "9":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<button @onclick="Euiler"> Euiler </button>
				<button @onclick="Carmichael"> Carmichael </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		case "10":
			<div>
				<p>Enter two numbers:</p>
				<input type="text" @bind-value="@firstInputBox" />
				<input type="text" @bind-value="@secondInputBox" />
				<button @onclick="isPrime"> isPrime </button>
				@if (isResultVisible)
				{
					<p>@result</p>
				}
			</div>
			break;
		default:
			break;
	}
</div>





@code {
	public bool isResultVisible { get; set; } = false;
	public string selected { get; set; } = "";
	public string result { get; set; } = "";
	public string errStr { get; set; } = "";
	[Required] public static string coefModule { get; set; } = "";
	[Required] public string firstInputBox { get; set; } = "";
	[Required] public string secondInputBox { get; set; } = "";

	private void SelectedMethod(ChangeEventArgs e)
	{
		isResultVisible = false;
		result = "";
		errStr = "";
		if (!string.IsNullOrWhiteSpace((string)e.Value))
		{
			selected = (string)e.Value;
		}
	}

	private unsafe void Add()
	{
		try
		{
			byte[] aBytes = Encoding.ASCII.GetBytes(firstInputBox);
			byte[] bBytes = Encoding.ASCII.GetBytes(secondInputBox);
			byte[] modBytes = Encoding.ASCII.GetBytes(coefModule);
			byte[] errorStrBytes = Encoding.ASCII.GetBytes(errStr);

			fixed (byte* aPtr = aBytes)
			fixed (byte* bPtr = bBytes)
			fixed (byte* modPtr = modBytes)
			fixed (byte* errStrPtr = errorStrBytes)
			{
				byte* resultPtr = MethodWrapper.addition(aPtr, bPtr, modPtr, errStrPtr);

				int resultLength = 0;
				while (resultPtr[resultLength] != 0)
					resultLength++;

				byte[] resultBytes = new byte[resultLength];
				Marshal.Copy((IntPtr)resultPtr, resultBytes, 0, resultLength);
				result = Encoding.ASCII.GetString(resultBytes);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private void Subtract()
	{
		//MethodWrapper.addition();
	}

	private void Multiply()
	{
		//MethodWrapper.addition();
	}

	private void Inversion()
	{
		//MethodWrapper.addition();
	}

	private void Division()
	{
		//MethodWrapper.addition();
	}

	private void FastPow()
	{
		//MethodWrapper.addition();
	}

	private void Polard()
	{
		//MethodWrapper.addition();
	}

	private void QuadSqrt()
	{
		//MethodWrapper.addition();
	}

	private void DscLog()
	{
		//MethodWrapper.addition();
	}

	private void Order()
	{
		//MethodWrapper.addition();
	}

	private void isGenerator()
	{
		//MethodWrapper.addition();

	}

	private void Carmichael()
	{
		//MethodWrapper.addition();
	}

	private void Euiler()
	{
		//MethodWrapper.addition();
	}

	private void isPrime()
	{
		//MethodWrapper.addition();
	}

}











@*//@page "/polinomial-field"
//@using System.Threading.Tasks
//@using System.Runtime.InteropServices

//<h1>Blazor App with wasm module</h1>

//<p>Enter two numbers to add:</ p >
//< input type = "text" @bind - value = "@number1" />
//< input type = "text" @bind - value = "@number2" />
//< button @onclick = "AddNumbers" > Add </ button >

//@if(!string.IsNullOrEmpty(result))
//{
//    < p > The sum is @result </ p >
//}

//@code {
//    private string number1;
//private string number2;
//private string result;

//[DllImport("addition")]
//private static extern byte addition(string a, string b);

//private async Task AddNumbers()
//{
//    var a = Marshal.StringToHGlobalAnsi(number1);
//    var b = Marshal.StringToHGlobalAnsi(number2);

//    try
//    {
//        var resultPtr = addition(Marshal.PtrToStringAnsi(a), Marshal.PtrToStringAnsi(b));
//        result = Marshal.PtrToStringAnsi(resultPtr);
//    }
//    finally
//    {
//        Marshal.FreeHGlobal(a);
//        Marshal.FreeHGlobal(b);
//    }
//}
//}*@